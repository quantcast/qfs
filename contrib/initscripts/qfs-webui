#!/bin/sh
#
# qfs-webui Starts the QFS monitoring web UI.
#
# chkconfig:   - 55 25
# description: This script starts the Quantcast File System \
#              web UI, used for monitoring metaserver and \
#              chunkserver status.

### BEGIN INIT INFO
# Provides: qfs-webui
# Required-Start:
# Required-Stop:
# Should-Start:
# Should-Stop:
# Default-Start: 3 4 5
# Default-Stop: 0 1 2 6
# Short-Description: Starts the QFS monitoring web UI.
# Description: Starts the QFS monitoring web UI service.
### END INIT INFO

# Source function library.
. /lib/lsb/init-functions

exec="/usr/bin/python"
script="/usr/share/qfs-webui/qfsstatus.py"
config="/etc/qfs/qfs-webui.conf"
prog="qfs-webui"
logdir="/var/log/qfs/"
pid_file="/var/run/qfs/webui.pid"

stdout_log="${logdir}/webui.out"
stderr_log="${logdir}/webui.err"

[ -e /etc/sysconfig/$prog ] && . /etc/sysconfig/$prog

lockfile=/var/lock/subsys/qfs-webui

# Set up a default search path.
PATH="/sbin:/usr/sbin:/bin:/usr/bin"
export PATH

# Get a sane screen width
[ -z "${COLUMNS:-}" ] && COLUMNS=80

[ -z "${CONSOLETYPE:-}" ] && CONSOLETYPE="$(/sbin/consoletype)"

# Read in our configuration
if [ -z "${BOOTUP:-}" ]; then
  if [ -f /etc/sysconfig/init ]; then
      . /etc/sysconfig/init
  else
    BOOTUP=color
    RES_COL=60
    MOVE_TO_COL="echo -en \\033[${RES_COL}G"
    SETCOLOR_SUCCESS="echo -en \\033[1;32m"
    SETCOLOR_FAILURE="echo -en \\033[1;31m"
    SETCOLOR_WARNING="echo -en \\033[1;33m"
    SETCOLOR_NORMAL="echo -en \\033[0;39m"
    LOGLEVEL=1
  fi
  if [ "$CONSOLETYPE" = "serial" ]; then
      BOOTUP=serial
      MOVE_TO_COL=
      SETCOLOR_SUCCESS=
      SETCOLOR_FAILURE=
      SETCOLOR_WARNING=
      SETCOLOR_NORMAL=
  fi
fi

echo_success() {
  [ "$BOOTUP" = "color" ] && $MOVE_TO_COL
  echo -n "["
  [ "$BOOTUP" = "color" ] && $SETCOLOR_SUCCESS
  echo -n $"  OK  "
  [ "$BOOTUP" = "color" ] && $SETCOLOR_NORMAL
  echo -n "]"
  echo -ne "\r"
  return 0
}

echo_failure() {
  [ "$BOOTUP" = "color" ] && $MOVE_TO_COL
  echo -n "["
  [ "$BOOTUP" = "color" ] && $SETCOLOR_FAILURE
  echo -n $"FAILED"
  [ "$BOOTUP" = "color" ] && $SETCOLOR_NORMAL
  echo -n "]"
  echo -ne "\r"
  return 1
}

start() {
  [ -x ${exec} ] || exit 5
  [ -f ${config} ] || exit 6
  echo -n $"Starting $prog: "
  # Starts webui via daemonize for fork excellence.
  start_daemon daemonize -o ${stdout_log} -e ${stderr_log} -p ${pid_file} ${exec} ${script} ${config}
  retval=$?
  [ $retval -eq 0 ] && (echo_success; touch $lockfile) || echo_failure
  echo
  return $retval
}

stop() {
  echo -n $"Stopping $prog: "
  killproc -p ${pid_file} ${exec}
  retval=$?
  [ $retval -eq 0 ] && (echo_success; rm -f $lockfile) || echo_failure
  echo
  return $retval
}

restart() {
  stop
  start
}

reload() {
  restart
}

force_reload() {
  restart
}

rh_status() {
  pid=$(pidofproc -p ${pid_file} ${prog})
  if [ $? -eq 0 ]; then
    echo "${prog} (pid ${pid}) is running..."
    return 0
  else
    if [ -e $lockfile ]; then
      echo "${prog} dead but lockfile exists"
      return 2
    else
      echo "${prog} is stopped"
      return 1
    fi
  fi
}

rh_status_q() {
  rh_status >/dev/null 2>&1
}


case "$1" in
  start)
    $1
    ;;
  stop)
    $1
    ;;
  restart)
    $1
    ;;
  reload)
    rh_status_q || exit 7
    $1
    ;;
  force-reload)
    force_reload
    ;;
  status)
    rh_status
    ;;
  condrestart|try-restart)
    rh_status_q || exit 0
    restart
    ;;
  *)
    echo $"Usage: $0 {start|stop|status|restart|condrestart|try-restart|reload|force-reload}"
    exit 2
esac
exit $?

